<%- include("partials/headerFooter/header.ejs") -%>
<input type="hidden" id="weightUnit" value="<%=user.weightUnit%>">    

<h1 class="white-text"><%=workout.name%></h1>
<br>

<%#LOOP FOR OVER ALL EXERCISE%>
<%exercises.forEach(function(exercise, index){%>

<%#CHANGE UNIT FOR SELECT EXERCISES%>
<% let unit = "reps" %>  
<% if (exercise.name === "Plank Hold" | exercise.name === "Side Plank Hold" | exercise.name === "Hip Bridge Hold") {unit = "seconds"}%>

<!--Calculate edit state-->
<%let hoursDifference = null%>
<%if (lastExercises[index].lastId != null && lastExercises[index].lastId != undefined) { %>
    <%const lastCompletedDate = lastExercises[index].lastId.getTimestamp()%>
    <%const now = Date.now()%>
    <%hoursDifference = Math.abs(lastCompletedDate - now)/36e5%>
<%}%>

<%let editState = false%>
<%if (hoursDifference != (undefined || null) && hoursDifference < 18 && ((lastExercises[index].sets[1] != (undefined || null) && lastExercises[index].sets[1].weight != (undefined || null) ) || exercise.name === "Hip Bridge Hold")) {%>
    <% editState = true %>
<%}%>

<%#ACCOUNT FOR KG STUFF%>
<%let step = exercise.weightIncrement%>
<%let startWeight = exercise.startWeight%>
<% if (user.weightUnit === "kgs"){%>
    <%step = exercise.weightIncrementKg %>
    <%startWeight = exercise.startWeightKg%>
<% } %>


    <!-- Handle if first time on exercise -->
    <%if (lastExercises[index].sets[0].reps === null && exercise.name != "Plank Hold" && exercise.name != "Side Plank Hold" && exercise.name != "Hip Bridge Hold" && exercise.name != "Pushups"){ %>

        <div class="card">
            <div class="card-body">
                <div id="E<%=index%>">
                    <!-- Exercise Header -->
                    <%- include("partials/workout/exerciseHeader/exerciseHeader.ejs", {index: index, exercise: exercise, unit: unit, editState: editState}) -%>
                    <%- include("partials/workout/firstTimeExercise.ejs", {index: index, step: step, startWeight: startWeight, exercise: exercise, unit: unit, user: user, functions: functions, editState: editState}) -%>
                </div>
            </div>
        </div>

    <%} else { %>


    

        <div class="card">
            <div class="card-body">
                <div id="E<%=index%>">
                    <!-- Exercise Header -->
                    <%- include("partials/workout/exerciseHeader/exerciseHeader.ejs", {index: index, exercise: exercise, unit: unit, editState: editState}) -%>

                    <div class="clickable" data-toggle="modal" data-target="#fullExerciseModal<%=index%>" data-backdrop="static" data-keyboard="false">
                        <h6>Sets</h6>
                        <%exercise.sets.forEach(function(set, index4){%>
                            <% let lastReps %>
                            <% let lastNote %>
                            <% let lastWeight %>

                            <%if (lastExercises[index].sets[index4] !== undefined){%>
                                <% lastReps = lastExercises[index].sets[index4].reps%>
                                <% lastNote = lastExercises[index].sets[index4].note%>
                                <% lastWeight = lastExercises[index].sets[index4].weight%>
                            <%} else {%>
                                <% lastReps = 0 %>
                                <% lastNote = "" %>
                                <% lastWeight = 0 %>
                            <%}%>
                            <%let weight = displayExercises[index][index4].weight%>
                            <%#HANDLE KGS %>
                            <%if (user.weightUnit === "kgs"){%>
                                <%weight = functions.round(functions.toKgs(displayExercises[index][index4].weight), exercise.weightIncrementKg) %>
                                <%lastWeight = functions.round(functions.toKgs(lastExercises[index].sets[index4].weight), exercise.weightIncrementKg) %>
                            <%}%>

                            <%let weightSentence = "at " + weight + " " + user.weightUnit%>
                            <%let weightSentence2 = "at " + lastWeight3 + " " + user.weightUnit%>
                            <%#HANDLE DROPDOWNS %>
                            <%if (exercise.dropDown.length > 0){%>
                                <%weightSentence = exercise.dropDown[displayExercises[index][index4].weight]%>
                                <%weightSentence2 = exercise.dropDown[displayExercises[index][index4].weight]%>
                            <%}%>


                            <p><button class="btn-list-number"><%=index4 + 1%></button>
                                <%if (editState) {%>
                                    <%=lastReps%> <%=unit%> <%=weightSentence2%> <%if (lastNote.length > 0){%>
                                    , <%=lastNote%>
                                    <%}%>
                                <%} else if (displayExercises[index][index4].low === null) { %>
                                    <%=displayExercises[index][index4].high%> <%=unit%> <%=weightSentence%> 
                                <% } else { %>
                                    <%=displayExercises[index][index4].low%> <%=unit%> <%=weightSentence%> 
                                <% } %>
                            </p>
                        <%})%>

                        <!--If Completed in last 18 hours show Completed CheckMark-->
                        <%if (editState) {%>
                            <div style="text-align: center;">
                            <p class="diminished no-margin"><img src="/icons/checkMark.svg"> Completed - <a href="#" class="italic">Edit</a></p>
                            </div>
                        <%} else {%>
                            <button class="my-btn btn-full-width my-btn-secondary waves-effect waves-orange">Start Exercise</button>
                        <%}%>
                    </div>

                    <!--FullExercise Modal-->
                    <%- include("partials/workout/fullExercise.ejs", {index: index, step: step, startWeight: startWeight, exercise: exercise, unit: unit, user:user, functions: functions, editState: editState, hoursDifference: hoursDifference}) -%>
                </div>
            </div>
        </div>

<%}%>

<%})%>

</div>

<%let barWeight = user.barWeight%>
<%if (user.weightUnit === "kgs"){%>
    <%barWeight = functions.toKgs(barWeight)%>
<%}%>

<div id="barWeight" data-bar-weight="<%=barWeight%>"></div>

<div class="modal fade special-modal" style="z-index:20000;" id="restTimerModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
aria-hidden="true">
<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable" role="document">
    <div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Rest Timer</h5>
        <img src="/icons/Close.svg" class="close" data-dismiss="modal" aria-label="Close">
        </img>
    </div>
    <div class="modal-body">
        <div class="d-flex justify-content-center" style="margin-top:30px; margin-bottom: 30px;">
            <svg width="250" height="250" style="">
                <defs>
                    <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">
                    <stop offset="0%" style="stop-color:#FE8C00;stop-opacity:1" />
                    <stop offset="100%" style="stop-color:rgba(255,255, 2555,0);stop-opacity:1" />
                    </linearGradient>
                </defs>
                <g>
                    <circle cx="125" cy="125" r="114" stroke="#F4F4F4" stroke-width="8" fill="transparent"/>
                    <circle class="overlayCircle" cx="125" cy="125" r="114" stroke="#F4F4F4" stroke-width="8" fill="transparent"/>
                    <text id="minuteTimer" x="60" y="151" style="font-size: 64px;">2</text>
                    <text x="100" y="151" style="font-size: 64px;">:</text>
                    <text id="secondTimer" x="120" y="151" style="font-size: 64px;">59</text>
                </g>
            </svg>
        </div>
        <div class="d-flex justify-content-between">
            <a type="button" id="restart" href="#" class="my-btn btn-link ask-about-macro-button">Restart</a>
            <a type="button" href="#" class="my-btn my-btn-secondary ask-about-macro-button" data-dismiss="modal">End Timer</a>
        </div>
    </div>
    </div>
</div>
</div>

<div class="modal-two"></div>

<%- include("partials/headerFooter/largeScreenOverlay.ejs") -%>

<%- include("partials/headerFooter/footerScripts.ejs") -%>
<script type="text/javascript" src="/js/history7.js"></script>
<script>
    let minutes = 2
    let seconds = 59

    $(document).ready(function(id){
        
        $('.restTimer').click(function(){
            $('.modal-two').fadeIn(400);
            id = setInterval(() => {
                $('#minuteTimer').text(minutes)
                $('#secondTimer').text(seconds)
                if (seconds === '00' && minutes > 0){
                    seconds = 59
                    minutes = minutes - 1
                } else if (seconds === '00' & minutes === 0){
                    clearInterval(id)
                }
                seconds--
                if (seconds < 10){
                    seconds = '0' + seconds
                }
            }, 1000);
        })
        $('#restart').click(function(){
            if (seconds === '00' && minutes === 0){
                console.log("true")
                seconds = 59
                minutes = 2
                id = setInterval(() => {
                    $('#minuteTimer').text(minutes)
                    $('#secondTimer').text(seconds)
                    if (seconds === '00' && minutes > 0){
                        seconds = 59
                        minutes = minutes - 1
                    } else if (seconds === '00' & minutes === 0){
                        clearInterval(id)
                    }
                    seconds--
                    if (seconds < 10){
                        seconds = '0' + seconds
                    }
            }, 1000);
            } else {
                let current = $('.overlayCircle')
                let clone  = current.clone(true)
                current.before(clone)
                current.remove()

                seconds = 59
                minutes = 2
            }
        })
        $("#restTimerModal").on("hide.bs.modal", function () {
            clearInterval(id)
            seconds = 59
            $('#timerText').text(seconds)
            $('.modal-two').fadeOut(400);
        });

        $(document).on('hidden.bs.modal', function (event) {
            if ($('.modal:visible').length) {
                $('body').addClass('modal-open');
            }
        });

        //BARCALC LOGIC

        function round(number, roundToNumber)
        {
            return Math.round(number/roundToNumber)*roundToNumber;
        }

        function toKgs(number){
            return round((number / 2.2046226218),.5)
        }

        //Returns the array of recommended weights
        function weightCalc(weightMinusBar, holderArray, weightsArray){
            for (let i = 0; i < weightsArray.length; i++){
            //set weightsoutput to the dividend of input and specific weight
            holderArray[i] = Math.floor(weightMinusBar / weightsArray[i])
            //find remainder and set it to the evaluated value
            weightMinusBar = weightMinusBar % weightsArray[i] 
            }
            return holderArray
        }
        
        //Adds the word And where appropriate as another array item
        function addAnd(array){
            if (array.length > 1){
            for (let i = 0; i < array.length; i++ ){
                if(i % 2 === 1){
                array.splice(i,0,"and")
                }
            }
            return array
            } else {
                return array
            }
            }
        
        //turns the array into a properly spaced sentence instead of an array
        function sentenceCreator(array){
            let sentence = ""
            array.forEach(function(phrase){
                sentence += " " + phrase
            })
            return sentence
        }
        
        function numberToWord (number){
            switch (number){
            case 1:
            return "one"
            case 2:
            return "two"
            case 3:
            return "three"
            case 4:
            return "four"
            case 5: 
            return "five"
            case 6:
            return "six"
            case 7:
            return "seven"
            case 8:
            return "eight"
            case 9:
            return "nine"
            }
        }

        function finalResultInterpreter(finalResultArray, weightsArray){
            let removes = []
            let adds = []
            //negative values
            finalResultArray.forEach(function(result, i){
                let s
                if (Math.abs(result) > 1){
                    s = "'s"
                } else {
                    s = ""
                }
                if(result < 0){
                    removes.push(`${numberToWord(Math.abs(result))} ${weightsArray[i]/2}${s}`)
                }else if (result > 0){
                    adds.push(`${numberToWord(result)} ${weightsArray[i]/2}${s}`)
                }
            })
            
            //Add the word "Add into the removes and adds arrays"
            addAnd(removes)
            addAnd(adds)
            
            //create the full sentence
            let fullSentence = ""
            if (removes.length > 0 && adds.length > 0){
                fullSentence = `on each side remove${sentenceCreator(removes)} then add${sentenceCreator(adds)}.`
            } else if (adds.length > 0) {
                fullSentence = `on each side add ${sentenceCreator(adds)}.`
            } else if (removes.length > 0){
                fullSentence = `on each side remove ${sentenceCreator(removes)}.`
            } else {
                fullSentence = `no weights to add`
            }
            
            return fullSentence
            
        }
  
        function barCalc2(previousWeight, displayWeight, barWeight, weightUnit) {
            let weights = [90, 70, 50, 20, 10, 5]
            if (weightUnit === "kgs"){
            weights = [50, 40, 30, 20, 10, 5, 2.5]
            } 
            let currentWeightMinusBar = displayWeight - barWeight
            let lastWeightMinusBar = previousWeight - barWeight
            let lastWeightsOutPut = []
            let currentWeightsOutPut = []
            let currentWeights
            let lastWeights
            if (currentWeightMinusBar < 0){
            if (weightUnit === "kgs"){
                currentWeights = [0,0,0,0,0,0,0]
            } else {
                currentWeights = [0,0,0,0,0,0]
            }
            } else {
            //do weightCalc on displayWeight
            currentWeights = weightCalc(currentWeightMinusBar,currentWeightsOutPut, weights)
            }
            if (lastWeightMinusBar < 0){
            if (weightUnit === "kgs"){
                lastWeights = [0,0,0,0,0,0,0]
            } else {
                lastWeights = [0,0,0,0,0,0]
            }
            } else {
            //do weightCalc on lastWeight
            lastWeights = weightCalc(lastWeightMinusBar, lastWeightsOutPut, weights)
            }
            const finalResult = []
            for (let i = 0; i < weights.length; i++){
            finalResult.push(currentWeights[i] - lastWeights[i])
            }
        
            return finalResultInterpreter(finalResult, weights)
        
        }

        function passBarCalcValues () {
            //lookup barWeight
            const barWeight = $('#barWeight').data("bar-weight")
            const weightUnit = $("#weightUnit").val()
            
            //warmup weight BarCalc
            $(".barCalcWarmUp").html(function(){
                console.log("warmups hit")
                //get id of barCalc
                const appendId = $(this).attr("id")
                .substring(7,10)
                const lastCharacter = $(this).attr("id").substring(10)
                const newLastCharacter = lastCharacter - 1
                let lastWeight
                //Handle if this is the first warmup
                if (newLastCharacter < 0) {
                    lastWeight = barWeight
                } else {
                    //find the corresponding lastweight from the warmup <p>
                    const lastWarmUpId = ("warmup" + appendId + newLastCharacter)
                    lastWeight = $(`#${lastWarmUpId}`).data("weight")
                }
                //find the corresponding currenweight from warmup <p>
                const currentWarmUpId = ("warmup" + appendId + lastCharacter)
                const currentWeight = $(`#${currentWarmUpId}`).data("weight")
                console.log("currentWeight: ")
                console.log(currentWeight)
                return "<img src='/icons/dumbbell.svg'> " + " Bar: " + barCalc2(lastWeight,currentWeight, barWeight, weightUnit)
            })

            //Normal weight BarCalc
            $(".barCalc").html(function(){
                //get id of barCalc
                const appendId = $(this).attr("id").substring(7,10)
                const lastCharacter = $(this).attr("id").substring(10)
                const newLastCharacter = lastCharacter - 1
            
                let lastWeight
                //Handle if this is the first exercise 
                if (newLastCharacter < 0) {
                    //Handle if there are warmups and set it to the last warmup
                    if ($(".weightWarmUp").length > 0){
                        //traverse up to get the per workout div id - something like E0 or E1
                        id = $(this).parent().parent().parent().parent().attr("id")
                        let testy = $(this).parent().parent().parent().parent().parent().parent()
                        //traverse down and find the warmups if there are any
                        lastWeight = $(`#${id}`).find(".weightWarmUp").last().data("weight")
                    } else {
                        //handle if there aren't any warm-ups
                        lastWeight = barWeight
                    }
                } else {
                    const lastWeightId = ("weight" + appendId + newLastCharacter)
                    lastWeight = $(`#${lastWeightId}`).val()
                }
                const currentWeightId = ("weight" + appendId + lastCharacter)
                const currentWeight = $(`#${currentWeightId}`).val()
                // console.log("currentWeight: ")
                // console.log(currentWeight)
                return "<img src='/icons/dumbbell.svg'> " + " Bar: " + barCalc2(lastWeight,currentWeight, barWeight, weightUnit)
                })
        }

        function updateWarmUps (newValue, callback) {
        if ($(this).data("set-weight") === 0 && $(this).data("has-warmups") === 1) {
            //traverse back to however many warmups and change their value
            const exercise = $(this).data("exercise")
            $.each($(".warmup").filter(`[data-exercise="${exercise}"]`), function(i){
            $(this).html(function(){
                const percent = $(this).data("percent")
                const newWarmupWeight = round(((percent * newValue)/100), 5)
                $(this).data("weight", newWarmupWeight)
                return newWarmupWeight
            })
            }) 
            callback()
        } else {
            callback()
        }
        }

        //PASS VALUES TO BARCALC
        $(".quantity").change(function(){
            const newValue = $(this).val()
            updateWarmUps.call($(this), newValue, passBarCalcValues)
        })

        //on page load/document ready trigger change so it's always there
        $(".quantity").trigger("change")

        $(".weight-button").on("click", function(){
            $(".quantity").trigger("change")

        })

    })
</script>
<%- include("partials/headerFooter/footerSimple.ejs") -%>